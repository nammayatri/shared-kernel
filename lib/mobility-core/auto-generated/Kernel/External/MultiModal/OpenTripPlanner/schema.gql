input InputCoordinates
 {
  lat: Float!
  lon: Float!
}

input TransportMode {
  mode: String!
}

type Plan {
  itineraries: [Itinerary]!
}

type Itinerary {
  duration: Float
  startTime: Float
  endTime: Float
  legs: [Leg]!
}

enum Mode {
    AIRPLANE
    BICYCLE
    BUS
    CABLE_CAR
    CAR
    COACH
    FERRY
    FLEX
    FUNICULAR
    GONDOLA
    RAIL
    SCOOTER
    SUBWAY
    TRAM
    CARPOOL
    TAXI
    TRANSIT
    WALK
    TROLLEYBUS
    MONORAIL
}

type step {
    distance: Float
    lon: Float
    lat: Float
    relativeDirection: RelativeDirection
    absoluteDirection: AbsoluteDirection
    streetName: String
    exit: String
    stayOn: Boolean
    area: Boolean
    bogusName: Boolean
    walkingBike: Boolean
}

type Leg {
  distance: Float
  duration: Float
  legGeometry: Geometry
  entrance: step
  exit: step
  mode: Mode
  startTime: Float
  pickupType: String
  endTime: Float
  fareProducts: [FareProductUse]
  from: Place!
  to: Place!
  route: Route
  steps: [step]
}

type Geometry {
  points: String
}

type FareProductUse {
  id: String!
  product: FareProduct
}

type FareProduct {
  id: String!
  name: String!
}

type Place {
  name: String
  lat: Float!
  lon: Float!
  departureTime: Float!
  arrivalTime: Float!
  stop : Stop
}

type Route {
  agency: Agency
  gtfsId: String!
  longName: String
  shortName: String
  color: String
  trips: [Trip]
}

type Trip {
  gtfsId: String!
}

type Agency {
  name: String!
  gtfsId: String!
}

type Stop {
  gtfsId: String!
  code: String
  platformCode: String
}

enum RelativeDirection {
  DEPART
  HARD_LEFT
  LEFT
  SLIGHTLY_LEFT
  CONTINUE
  SLIGHTLY_RIGHT
  RIGHT
  HARD_RIGHT
  CIRCLE_CLOCKWISE
  CIRCLE_COUNTERCLOCKWISE
  ELEVATOR
  UTURN_LEFT
  UTURN_RIGHT
  ENTER_STATION
  EXIT_STATION
  FOLLOW_SIGNS
}

enum AbsoluteDirection {
  NORTH
  NORTHEAST
  EAST
  SOUTHEAST
  SOUTH
  SOUTHWEST
  WEST
  NORTHWEST
}

type Query {
  plan(
    from: InputCoordinates!
    to: InputCoordinates!
    transportModes: [TransportMode]
    date: String
    time: String
    numItineraries: Int
  ): Plan!
}
